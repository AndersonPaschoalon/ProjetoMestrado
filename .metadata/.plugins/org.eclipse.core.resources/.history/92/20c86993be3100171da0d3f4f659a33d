//============================================================================
// Name        : CompactTraceDescriptor.cpp
// Author      : Anderson Paschoalon
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include "DatabaseInterface.h"
#include "DataProcessor.h"
#include "DummyFlow.h"
#include "NetworkTrace.h"
#include "Defines.h"
#include "Protocol.h"
#include "cfunctions.h"
#include "MesserLog.h"

#define LOG_LEVEL_MAIN DEBUG

#define REGRESSION_TESTS 1


//using namespace std;

int main()
{
	MESSER_LOG_INIT(LOG_LEVEL_MAIN);
#ifdef REGRESSION_TESTS

	MESSER_NOTICE("<%s> Starting regression tests...");
	RegressionTests rt;

	DataProcessor regTest_dp = DataProcessor();
	Protocol regTest_proto = Protocol();
	NetworkTrace regTest_nt;
	StochasticModelFit unityTest_smf = StochasticModelFit();

	regTest_dp.regression_tests();
	regTest_nt.regression_tests();
	regTest_proto.regression_tests();
	unityTest_smf.unity_tests();
	cfunctions_unitytests();

	//rt.wait_int("Finished tests, press any key...");
	MESSER_NOTICE("<%s> Finishing regression tests...");
#endif

	//TODO the main function is the controller: it should parse the
	// command-line options, instantiate any component, and say what it
	//should do. So it should parse the command

	string experimentName = "live_background-traffic-1";
	DataProcessor dp;
	DatabaseInterface dbif;
	long int nflows = 0;
	NetworkTrace* trace = NULL;

	MESSER_NOTICE("<%s> Creating a NetworkTrace");

	//Create Network Trace from database
	//TODO: the data object structure do not have to change.. I just want a
	// constructor that uses a experiment name and a database interface pointer
	// as input.
	dbif.getNumberOfFlows(experimentName, &nflows);

	MESSER_INFO("<%s> new NetworkTrace();");
	trace = new NetworkTrace();

	MESSER_INFO("<%s> Calling DataProcessor...");
	dp.calculate(experimentName, &dbif, trace);


	trace->setInfoTracename("teste-chapolin");
	trace->setInfoCommentaries("este e um teste do compact trace descriptor");
	trace->setTrafficGenEngine("D-ITG");
	trace->setInfoCaptureInterface("eth0");
	trace->setInfoCaptureDate("07/04/2017");
	trace->writeToFile("kkk.xml");

	MESSER_NOTICE("<%s> Executing NetworkTrace");
	trace->exec(true);



	//cout << "sleep before the next trace" << endl;
	//sleep(160);


//#ifdef DEBUG_NetworkFlow
	MESSER_DEBUG("<%s> Check the values of networkFlow inside NetworkTrace class");

	/*

	MESSER_DEBUG("<%s> trace->networkFlow[0]->getNetworkProtocol() = %s", trace->networkFlow[0]->getNetworkProtocol());
	MESSER_DEBUG("<%s> trace->networkFlow[0]->getNetworkDstAddr() = %s", trace->networkFlow[0]->getNetworkDstAddr());
	MESSER_DEBUG("<%s> trace->networkFlow[0]->getTransportProtocol() = %s", trace->networkFlow[0]->getTransportProtocol());
	MESSER_DEBUG("<%s> trace->networkFlow[0]->getTransportDstPort() = %d", trace->networkFlow[0]->getTransportDstPort());
	MESSER_DEBUG("<%s> trace->networkFlow[2]->getNetworkProtocol() = %s", trace->networkFlow[2]->getNetworkProtocol());
	MESSER_DEBUG("<%s> trace->networkFlow[4]->getNetworkDstAddr() = %s", trace->networkFlow[4]->getNetworkDstAddr());
	MESSER_DEBUG("<%s> trace->networkFlow[6]->getTransportProtocol()  = %s", trace->networkFlow[6]->getTransportProtocol());
	MESSER_DEBUG("<%s> trace->networkFlow[30]->getTransportDstPort() = %d", trace->networkFlow[30]->getTransportDstPort());
	MESSER_DEBUG("<%s> trace->getNumberOfFlows() = %d", trace->getNumberOfFlows());
	MESSER_DEBUG("<%s> ");
	*/
	//#endif

	delete trace;


	NetworkTrace* tracetest = NULL;
	tracetest = new NetworkTrace("kkk.xml");
	//NetworkTrace traceTest = NetworkTrace("kkk.xml");
	tracetest->setInfoTracename("teste-chapolin");
	tracetest->setInfoCommentaries("este e um teste do compact trace descriptor");
	tracetest->setTrafficGenEngine("D-ITG");
	tracetest->setInfoCaptureInterface("eth0");
	tracetest->setInfoCaptureDate("07/04/2017");
	tracetest->writeToFile("copia-kjjjjj.xml");

	delete tracetest;


	MESSER_LOG_END();
	return 0;
}

/*
 * DummyFlow.cpp
 *
 *  Created on: 14 de jun de 2016
 *      Author: apaschoalon
 */

#include "Defines.h"
#include "DummyFlow.h"

DummyFlow::DummyFlow()
{
}

DummyFlow::~DummyFlow()
{
}

void DummyFlow::print()
{
}

void DummyFlow::flowStart()
{
	MESSER_LOG_INIT(DEBUG);



	/// Statistical vars
	counter flowId = 0;
	string netInterface = "";

	/// On/Off time vars
	//struct timespec start, end; // time probes
	time_t usec_startDelay = 0; // time in useconds
	//time_t usec_onTime = 0; // time in useconds
	time_t usec_offTime = 0; // time in useconds
	time_sec sec_startDelay = getFlowStartDelay(); // times in seconds
	time_sec sec_onTime = 0;
	time_sec sec_offTime = 0;
	uint nbytes = 0;
	uint npackets = 0;
	//uint64_t delta_us; // calc delta times ?
	//time_sec delta_s;

	usec_startDelay = time_t(sec_startDelay * 1.0e6);

	int fid = int(getFlowId());
	//MESSER_DEBUG("Starting flow %d @ <%s, %s>", fid);
	//int fid = 0;

	//DEBUG
	//clock_gettime(CLOCK_MONOTONIC_RAW, &start);

	//cout << sec_startDelay << endl;

	usleep(usec_startDelay);
	while (1)
	{

		MESSER_DEBUG("flow %d  while() @ <%s, %s>", fid);


		sec_onTime = getSessionOnTime_next();
		npackets = getSessionOnTime_nPackets();
		nbytes = getSessionOnTime_nBytes();
		MESSER_DEBUG("flow %d  while() @ <%s, %s>", fid);
		//sleep(1);


		flowGenerate(fid, sec_onTime, npackets, nbytes, netInterface);
		//resetCounters();

		sec_offTime = getSessionOffTime_next();
		if (sec_offTime == 0)
		{
			break;
		}
		usec_offTime = time_t(sec_offTime * 1.0e6);
		usleep(usec_offTime);

	}

	////DEBUG
	//clock_gettime(CLOCK_MONOTONIC_RAW, &end);

	//delta_us = (end.tv_sec - start.tv_sec) * 1000000
	//		+ (end.tv_nsec - start.tv_nsec) / 1000;
	//
	//printf("FlowDuration[actual/expected] = (%0.5d, %0.5d)", (delta_us / 1.0e6),
	//		getFlowDuration());
}

//void DummyFlow::flowGenerate(const counter& flowId, const time_sec& onTime,
//		const unsigned int& npackets, uint nbytes, const uint& nbytes,
//		const string& netInterface)
void DummyFlow::flowGenerate(const counter& flowId,
			const time_sec& onTime, const uint& npackets, const uint& nbytes,
			const string& netInterface)
{
	int rc = 0;

	unsigned int usecs = (unsigned int) (this->getFlowStartDelay() * MEGA_POWER);
	string flow_str_print = "";
	protocol prt;
	StochasticModelFit themodel;

	/***************************************************************************
	 * Dummy-parser
	 **************************************************************************/

	/**
	 * Flow-level
	 */
	flow_str_print += "Flow" + std::to_string(flowId) + "> Duration:"
			+ std::to_string(getFlowDuration()) + ", Start-delay:"
			+ std::to_string(getFlowStartDelay()) + "s" + ", N.packets: "
			+ std::to_string(getNumberOfPackets());

	////////////////////////////////////////////////////////////////////////////
	/// Link-layer protocol
	////////////////////////////////////////////////////////////////////////////
	flow_str_print += " Link[" + Protocol(this->getLinkProtocol()).str() + "]";

	/*
	 flow_str_print += " Link[";
	 prt = this->getLinkProtocol();
	 if (prt == PROTOCOL__ETHERNET)
	 {
	 flow_str_print += "Ethernet";
	 }
	 else
	 {
	 flow_str_print += "Ethernet";
	 }
	 flow_str_print += "]";
	 */
	////////////////////////////////////////////////////////////////////////////
	/// Network-layer protocol
	////////////////////////////////////////////////////////////////////////////
	flow_str_print += " Network[" + Protocol(this->getNetworkProtocol()).str()
			+ "]";

	/*
	 flow_str_print += " Network[";
	 prt = this->getNetworkProtocol();
	 if (prt == PROTOCOL__IPV4)
	 {
	 flow_str_print += "IPv4: ";
	 }
	 else if (prt == PROTOCOL__IPV6)
	 {
	 flow_str_print += "IPv6: ";
	 }
	 else
	 {
	 flow_str_print += std::to_string(prt) + ": ";
	 }
	 flow_str_print += this->getNetworkSrcAddr() + " > "
	 + this->getNetworkDstAddr() + "]";
	 */
	////////////////////////////////////////////////////////////////////////////
	/// Transport-layer protocol
	////////////////////////////////////////////////////////////////////////////
	flow_str_print += " Transport["
			+ Protocol(this->getTransportProtocol()).str() + "]";
	/*
	 flow_str_print += " Transport[";
	 prt = this->getTransportProtocol();
	 if (prt == PROTOCOL__TCP)
	 {
	 flow_str_print += "TCP";
	 }
	 else if (prt == PROTOCOL__UDP)
	 {
	 flow_str_print += "UDP";
	 }
	 else if (prt == PROTOCOL__ICMP)
	 {
	 flow_str_print += "ICMP";
	 }
	 else if (prt == PROTOCOL__ICMPV6)
	 {
	 flow_str_print += "ICMPv6";
	 }

	 else if (prt == PROTOCOL__SCTP)
	 {
	 flow_str_print += "SCTP";
	 }

	 else if (prt == PROTOCOL__DCCP)
	 {
	 flow_str_print += "";
	 }

	 else if (prt == PROTOCOL__GRE)
	 {
	 flow_str_print += "GRE";
	 }
	 else
	 {
	 flow_str_print += std::to_string(prt);
	 }
	 flow_str_print += ": " + std::to_string(this->getTransportSrcPort()) + " > "
	 + std::to_string(this->getTransportDstPort()) + "]";
	 */
	// Application protocol
	flow_str_print += " Application["
			+ Protocol(this->getApplicationProtocol()).str() + "]";

	////////////////////////////////////////////////////////////////////////////
	/// Inter-deperture model
	////////////////////////////////////////////////////////////////////////////
	flow_str_print += " Inter-deperture["
			+ this->getInterDepertureTimeModel(0).strModelName() + "]";
	/*
	 flow_str_print += " Inter-deperture[";
	 themodel = this->getInterDepertureTimeModel(0);
	 flow_str_print += themodel.strModelName();

	 if (themodel.modelName() == WEIBULL)
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", betha=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == NORMAL)
	 {
	 flow_str_print += ": mu=" + std::to_string(themodel.param1())
	 + ", sigma=" + std::to_string(themodel.param2());
	 }
	 else if ((themodel.modelName() == EXPONENTIAL_LINEAR_REGRESSION)
	 || (themodel.modelName() == EXPONENTIAL_MEAN))
	 {
	 flow_str_print += ": lambda=" + std::to_string(themodel.param1());
	 }
	 else if ((themodel.modelName() == PARETO_LINEAR_REGRESSION)
	 || (themodel.modelName() == PARETO_MAXIMUM_LIKEHOOD))
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", xm=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == CAUCHY)
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", x0=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == CONSTANT)
	 {
	 flow_str_print += ": mean=" + std::to_string(themodel.param1());
	 }
	 else if ((themodel.modelName() == SINGLE_PACKET)
	 || (themodel.modelName() == NO_MODEL))
	 {
	 //do nothing
	 }
	 else
	 {

	 cerr << "Error @" << __PRETTY_FUNCTION__
	 << "No model selected for Inter-deperture model\n" << "Hint: "
	 << " this->getInterDepertureTimeModel_next() = "
	 << themodel.strModelName() << endl;
	 }

	 flow_str_print += "] ";

	 flow_str_print += " ("
	 + std::to_string(getNumberOfInterdepertureTimeModels()) + ")";
	 */
	////////////////////////////////////////////////////////////////////////////
	/// Packet-size model
	////////////////////////////////////////////////////////////////////////////
	flow_str_print += " Packet-size-Mode1["
			+ this->getPacketSizeModelMode1(0).strModelName() + "]";
	flow_str_print += " Packet-size-Mode2["
			+ this->getPacketSizeModelMode2(0).strModelName() + "]";

	/*
	 flow_str_print += " Packet-size-Mode1[";

	 themodel = this->getPacketSizeModelMode1(0);
	 flow_str_print += themodel.strModelName();

	 if (themodel.modelName() == WEIBULL)
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", betha=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == NORMAL)
	 {
	 flow_str_print += ": mu=" + std::to_string(themodel.param1())
	 + ", sigma=" + std::to_string(themodel.param2());
	 }
	 else if ((themodel.modelName() == EXPONENTIAL_LINEAR_REGRESSION)
	 || (themodel.modelName() == EXPONENTIAL_MEAN))
	 {
	 flow_str_print += ": lambda=" + std::to_string(themodel.param1());
	 }
	 else if ((themodel.modelName() == PARETO_LINEAR_REGRESSION)
	 || (themodel.modelName() == PARETO_MAXIMUM_LIKEHOOD))
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", xm=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == CAUCHY)
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", x0=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == CONSTANT)
	 {
	 flow_str_print += ": mean=" + std::to_string(themodel.param1());
	 }
	 else if (themodel.modelName() == NO_MODEL)
	 {
	 //flow_str_print += ": mean=" + std::to_string(themodel.param1);
	 }
	 else
	 {
	 cerr << "Error @ " << __PRETTY_FUNCTION__
	 << "No model selected for Packet-size Mode1 model\n" << endl;
	 cerr << "Hint: " << " getPacketSizeModelMode1_next = "
	 << themodel.strModelName() << endl;
	 errno = EINVAL;
	 }
	 flow_str_print += "] ";

	 flow_str_print += " Packet-size-Mode2[";

	 themodel = this->getPacketSizeModelMode2(0);
	 flow_str_print += themodel.strModelName();

	 if (themodel.modelName() == WEIBULL)
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", betha=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == NORMAL)
	 {
	 flow_str_print += ": mu=" + std::to_string(themodel.param1())
	 + ", sigma=" + std::to_string(themodel.param2());
	 }
	 else if ((themodel.modelName() == EXPONENTIAL_LINEAR_REGRESSION)
	 || (themodel.modelName() == EXPONENTIAL_MEAN))
	 {
	 flow_str_print += ": lambda=" + std::to_string(themodel.param1());
	 }
	 else if ((themodel.modelName() == PARETO_LINEAR_REGRESSION)
	 || (themodel.modelName() == PARETO_MAXIMUM_LIKEHOOD))
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", xm=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == CAUCHY)
	 {
	 flow_str_print += ": alpha=" + std::to_string(themodel.param1())
	 + ", x0=" + std::to_string(themodel.param2());
	 }
	 else if (themodel.modelName() == CONSTANT)
	 {
	 flow_str_print += ": mean=" + std::to_string(themodel.param1());
	 }
	 else if (themodel.modelName() == NO_MODEL)
	 {
	 //flow_str_print += ": mean=" + std::to_string(themodel.param1);
	 }
	 else
	 {
	 perror(
	 "Error @ DummyFlow::flowGenerate(). No model selected for Packet-size Mode2 model\n");
	 cerr << "Hint: " << " getPacketSizeModelMode2_next = "
	 << themodel.strModelName() << endl;
	 errno = EINVAL;
	 }
	 flow_str_print += "] ";

	 //convert the cpp flow-string to a c flow string, in order to atomize the printing
	 const char* flow_print = flow_str_print.c_str();

	 //rc = usleep(usecs);
	 if (rc != 0)
	 {
	 perror(
	 "Impossible to execute usleep() sleep at void DummyFlow::printFlow()\n");
	 errno = EAGAIN;
	 exit(EXIT_FAILURE);
	 }
	 */
	const char* flow_print = flow_str_print.c_str();
	pthread_mutex_t lock;
	pthread_mutex_init(&lock, NULL);
	pthread_mutex_lock(&lock);
	printf("%s\n", flow_print);
	pthread_mutex_unlock(&lock);
	pthread_mutex_destroy(&lock);

}


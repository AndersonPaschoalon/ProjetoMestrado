#!/usr/bin/python3
import csv
import argparse
import numpy as np
import matplotlib.pyplot as plt
import math
import sys
import collections
from .Utils.Terminal import Terminal as term
from .Utils.Csv import Csv
from .Utils.Matrix import Matrix


########################################################################################################################
# Utils
########################################################################################################################

def load_csv(datafile=''):
    """
    Load float CSV file into a matrix.
    mtr_float = load_csv(datafile='file.csv')
    :param datafile: CSV file to be loaded
    :return: matrix with the CSV file data
    """
    try:
        with open(datafile) as f:
            lines = (line for line in f if not line.startswith('#'))
            csv_matrix = np.loadtxt(lines, delimiter=',')
        return csv_matrix
    except:
        term.print_color(color="red", data="File {" + datafile + "} not found.")
        sys.exit("File not found")



def load_csv_str(datafile=''):
    """
    Load a String CSV file into a matrix
    :param datafile:
    :return: string matrix with CSV data
    mtr_str = load_csv_str(datafile='file.csv')
    """
    ifile = ""
    try:
        ifile = open(datafile, "rU")
    except:
        term.print_color(color="red", data="File {" + datafile + "} not found.")
        sys.exit("File not found")
    reader = csv.reader(ifile, delimiter=",")
    rownum = 0
    a = []
    for row in reader:
        if len(row) == 0 or row[0][0] == '#':
            continue
        for index in range(0, len(row) - 1):
            row[index] = row[index].strip()
        a.append(row)
        rownum += 1
    ifile.close()
    return a


def column(matrix, i):
    """
    Returns a column of a two dimensional matrix
    mtr_col = column(mtr, 2):
    :param matrix: matrix
    :param i: column index
    :return: vector
    """
    return [row[i] for row in matrix]


def saver_helper(figure_object, file_name="default"):
    """
    Helper for saving figure in many formats
    :param figure_object: object fig
    :param file_name: file name to be saved
    :return: void
    """
    figure_object.savefig(fname=file_name + '.pdf')
    # figure_object.savefig(fname=file_name+'.svg')
    figure_object.savefig(fname=file_name + '.png')
    figure_object.savefig(fname=file_name + '.eps')


def plt_free():
    """
    """
    plt.cla()
    plt.clf()
    plt.close()


def print_info(title="title", location="path-file"):
    """

    :param title:
    :param location:
    :return:
    """
    print("Plotting `{0}` > `{1}`".format(title, location))


########################################################################################################################
# Plot functions
########################################################################################################################

def plot_data1_data2yerr(title, d1_label, d2_label, x_axis_label, y_axis_label,
                         data1_x, data1_y, data2_x_, data2_y, data2_yerr):
    # plotting
    print_info(title=datafile, location=plot_dir)
    fig1, ax1 = plt.subplots()
    ax1.plot(lx, ly, 'x', color="darkblue", label=llabel, linewidth=3)
    ax1.plot(ax, ay, 'r-', label=alabel, linewidth=3)
    ax1.legend(loc='best')
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.grid(color='black', linestyle=':')
    plt.title(plot_title)
    saver_helper(fig1, file_name=plot_dir + plot_file)
    plt_free()



########################################################################################################################
# Plot scripts
########################################################################################################################

def validation_plot():

    print("---")


########################################################################################################################
# Help tutorial/tests
########################################################################################################################



########################################################################################################################
# Main
########################################################################################################################

if __name__ == "__main__":
    # arg parser
    parser = argparse.ArgumentParser(description='Run plotter for simulations or paper plots')
    parser.add_argument("--validation", type=str, nargs="+",
                        help="Plot the data generated by the simulation",
                        required=False)
    parser.add_argument("--paper", action='store_true',
                        help="nothing to do",
                        required=False)

    parser.add_argument("--man", action='store_true', help="Manual", required=False)
    parser.add_argument("--test", action='store_true', help="Run plots being developed", required=False)

    args = vars(parser.parse_args())  # convert parser object to a dictionary
    # args = args = {'paper': False, 'test': True, 'simulation': 'plots/skype/', 'test2': None}
    # args = args = {'paper': False, 'paper2': False, 'test': True, 'simulation': 'plots/skype/', 'test2': None}
    # args = {"paper": False, "test": True, "simulation": None, "man": None}
    if args["simulation"]:
        # ./plots.py --simulation "./plots/skype/"
        term.print_color(color="green", data='./plots.py --simulation "{0}"'.format(args.get("simulation")[0]))
        validation_plot(args.get('simulation')[0])
    elif args["paper"]:
        # ./plots.py --paper
        print("nothing to do")
        # paper_aicbic_plots_pt2()
    elif args["man"]:
        # ./plots.py --help
        help_menu()
    elif args["test"]:
        run_tests()


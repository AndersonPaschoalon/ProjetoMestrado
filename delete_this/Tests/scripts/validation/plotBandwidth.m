#!/usr/bin/octave-cli -qf
% plotTraceWaveketMra.m
%
% Licensing:
%
%       This code is distributed under the GNU LGPL license.
%
% Modified:
%
%       26 March 2017
%
% Author:
%
%       Anderson Paschoalon
%
% Command line args:
%
%	arg1: experiment name
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initialization and load data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%inicialization
arg_list = argv ();
close all; clc; clf;
graphics_toolkit ("gnuplot");
set(0, 'DefaultLineLineWidth', 4);
set(0,'defaulttextfontsize', 14);
set(0,'DefaultAxesFontSize',12)
set(0,'DefaultAxesFontName', 'Times New Roman')
EXPERIMENT_NAME = arg_list{1};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% plot directory whre the gnuplot data files will be saved
PLOT_DIR = '../../plots/';

% gnuplot data extension
PLOT_DATA_EXT = ".dat";

% path and datafile prefix. file generated by pcap-sniffer.py
DATAFILE_NAME_PREFIX = "../data/packetsinfo_";

%  file extension
DATAFILE_NAME_EXT = ".txt";

% path+file with packet data to be loaded
SIMULATION_DATA = strcat(DATAFILE_NAME_PREFIX, EXPERIMENT_NAME, DATAFILE_NAME_EXT);

% load basic data 
TraceData = dlmread(SIMULATION_DATA, ' ' , 2, 0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Wavelet multiresolution energy analizis (MREA)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% constants
granularity = 0.01; % 10 ms
numberOfPackets = TraceData(end, 1);
totalTime =  TraceData(end, 5);
numberOfDots = floor(totalTime/granularity);
vet_depertureTime = TraceData(:,5);
vet_packetLen = TraceData(:,3)*8;
scale = 10^6;
% vars
vet_mbitRate = zeros(numberOfDots,1);
vet_time = zeros(numberOfDots,1);
bitsCounter = 0;
timeCounter = granularity;
index_vetDepertureTime = 1;
plot1 = 0;
for i = 1:numberOfDots
        bitsCounter = 0;
        while(vet_depertureTime(index_vetDepertureTime) < timeCounter )
                % count number of packets
                bitsCounter = bitsCounter + vet_packetLen(index_vetDepertureTime);
                index_vetDepertureTime = index_vetDepertureTime + 1;
        endwhile
        %plot data
        vet_time(i) = timeCounter;
        vet_mbitRate(i) = (bitsCounter/granularity)/(scale);
        %update        
        timeCounter = timeCounter + granularity;
endfor
% plot...
clf;
hold on;
grid on;
plot1 = plot(vet_time,vet_mbitRate );
set(gca, 'fontsize', 20);
set(plot1, 'LineWidth', 1);
set(gca,'Fontname','Timesnewroman');
xlabel('time (seconds)'); 
ylabel('Mbps');
figure_name = strcat('figures/', EXPERIMENT_NAME, '-', 'Bandwidth', '.png' );
saveas(gca, figure_name);
hold off;
grid off;
/*
 * DatabaseInterface.h
 *
 *  Created on: 14 de jun de 2016
 *      Author: apaschoalon
 */

#ifndef DATABASEINTERFACE_H_
#define DATABASEINTERFACE_H_

//#define DEBUG 1

//include libraries
#include <iostream>
#include <string>
#include <array>
#include <cstring>
#include <list>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <sqlite3.h>
#include <string.h>

//local includes
//#include "MesserLog.h"
#include "Protocol.h"
#include "cfunctions.h"
#include "SimitarWorkspace.h"

//local defines
#define INT_BUFFER_SIZE 20

//namespaces
using namespace std;
using std::list;
using std::string;
using std::cout;
using std::cin;
using std::endl;
using std::stol;
using std::stod;
using std::stoi;
using std::to_string;

class DatabaseInterface
{
public:

	/**
	 * Default constructor of the database interface.
	 */
	// TODO criar base de dados, caso não exista
	// TODO argumento: base de dados!
	DatabaseInterface();

	/**
	 * Default destructor. Free any allocated memory
	 */
	virtual ~DatabaseInterface();

	/**
	 * Returns a short information about the class
	 */
	string toString();

	// TODO Metodos para o *Sniffer*
	//--------------------------------------------------------------------------
	//      eu acho que não faz sentido fazer um metodo para armazenar cada
	//      pacote. Isso pode acrecentar muito overhead. O ideal é criar um
	//      metodo que realiza a captura dos pacotes direto, em um loop for
	//      no Sniffer. Nesse caso, me parece a melhor solução, criar uma
	//      classe derivada desta,  e criar os seguintes metodos:
	//      // cria uma nova tabela de trace
	//      > int newTraceTable(string* traceName, string* comentary);
	//      > int capturePcap(string* traceName, string* pcapName);
	//      > int captureInterface(string* traceName, string* interfaceName);
	//--------------------------------------------------------------------------
	//		também acho que não faz sentido implementar demais metodos do
	//		Sniffer. A classe base será somente de leitura e seleção de dados
	//		baseados no "label". metodos de captura e especializados, como
	//		getPlotData(), irei implementar na classe derivada.
	//		> string getPacketData(int experimentId, int lastPacketID);
	//		> int setFlowData(int flowId, int packetID);
	//		> FILE getPlotData(int experiment);
	//		[????]int getFlowNumber();
	//Double
	/**
	 * Retrieve data of a specified experiment. The data is specified by the
	 * column name "label".
	 * @param experimentName the experiment name, used to access the column.
	 * @param label the column name.
	 * @param value the retrieved value. This method returns the value of a
	 * single row.
	 * @return returns 0 if it was executed properly, and returns 1 otherwise.
	 */
	int getTraceData(const string experimentName, const string label,
			string* value);

	/**
	 * Retrieve data of a specified experiment. The data is specified by the
	 * column name "label".
	 * @param experimentName the experiment name, used to access the column.
	 * @param label the column name.
	 * @param value the retrieved value.
	 * @return returns 0 if it was executed properly, and returns 1 otherwise.
	 */
	int getTraceData(const string experimentName, const string label,
			int* value);

	/**
	 * Retrieve a list of all trace names stored in the database.
	 * @param traceNames_list reference to the traces stored in the database
	 * @return returns 0 if it was executed properly, and returns 1 otherwise.
	 */
	int getTraceList(list<string>& traceNames_list);

	/**
	 * Retrieve the number of flows stored in the database.
	 * @param nflows reference to the traces stored in the database
	 * @return returns 0 if it was executed properly, and returns 1 otherwise.
	 */
	int getNumberOfFlows(string experimentName, long int* nflows);

	/**
	 * Retrieve a
	 */
	int getFlowData(string experimentName, int flowID, string label,
			long int* value);

	/**
	 * Retrieve a
	 */
	int getFlowData(string experimentName, int flowID, string label,
			double* value);

	/**
	 * Retrieve a
	 */
	int getFlowData(string experimentName, int flowID, string label,
			string* str);

	/**
	 * Retrieve a
	 */
	int getFlowData(string experimentName, int flowID, string label,
			list<long int>& value_list);

	/**
	 * Retrieve a
	 */
	int getFlowData(string experimentName, int flowID, string label,
			list<int>& value_list);

	/**
	 * Retrieve a
	 */
	int getFlowData(string experimentName, int flowID, string label,
			list<unsigned int>& value_list);

	/**
	 * Retrieve a
	 */
	int getFlowData(string experimentName, int flowID, string label,
			list<double>& value_list);

	/**
	 * Retrieve a
	 */
	int getFlowData(string experimentName, int flowID, string label,
			list<string>& value_list);

private:
	/**
	 * Name of Trace Table. It store information about all analyzed captures
	 */
	string tracesList_table;

	/**
	 * Capture tables name. It stores the prefix of the capture tables.
	 */
	string capture_table;

	/**
	 * Database pointer.
	 */
	sqlite3 *db;

	/**
	 * database interface error logger member
	 * 0: no error at all
	 * 1: error reading database
	 * 2: failed to fetch data
	 * 3: missing row (!SQLITE_ROW)
	 */
	int databaseInterface_error;

};

#endif /* DATABASEINTERFACE_H_ */

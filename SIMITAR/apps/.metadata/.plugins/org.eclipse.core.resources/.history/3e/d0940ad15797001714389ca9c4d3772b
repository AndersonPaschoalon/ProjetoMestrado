#include <iostream>
#include <string>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <thread>         // std::thread
#include <mutex>          // std::mutex
#include "IperfFlow.h"


int main()
{
	std::cout << "hello world" << std::endl;
	return (0);
}

std::string iperf_command()
{
	/// iperf running options. Traffic generation custom options
	enum_transmission_type transmission_type = on_time;
	std::string congestion_algorithm_name = "reno";
	bool real_time = true;
	bool congestion_algorithm = true;
	bool no_delay = true;

	/// Simitar values. Values captured form the compact trace descriptor
	int bw = 3;
	int pps = 3;
	int npackets = 12;
	int onTime = 13;
	int nkbytes = 14;
	int nkbits = 15;
	int ttlVal = 64;
	bool tcp = true;
	bool ipv6 = false;
	std::string server_ip = "10.0.0.2";
	std::string client_ip = "10.0.0.1";
	int tranport_port = 2222;
	std::string format = "k"; // format to report: kbits, mbits, KBytes, MBytes

	/// Iperf config opts. Iperf command options
	std::string opt_bandwidth;
	std::string opt_tranmission;
	if (transmission_type == on_time)
	{
		opt_tranmission = " --time " + std::to_string(onTime);
		opt_bandwidth = " --bandwidth " + std::to_string(bw) + "k";
	}
	else if (transmission_type == bits)
	{
		opt_tranmission = " --time " + std::to_string(onTime);
		opt_bandwidth = " --bandwidth " + std::to_string(bw) + "k";
	}
	else // transmission_type == packets
	{
		opt_tranmission = " --num " + std::to_string(npackets);
		opt_bandwidth = " --bandwidth " + std::to_string(npackets / onTime)
				+ "pps";
	}
	std::string opt_format = " --format k "; // format to report: Kbits, Mbits, KBytes, MBytes
	std::string opt_transport_protocol = (tcp == true) ? "" : " --udp ";
	std::string opt_transport_port = std::string(" --bind ") + client_ip
			+ std::string(":") + std::to_string(tranport_port);
	std::string opt_real_time = (real_time == true) ? " --realtime " : "";
	std::string opt_nodelay = " --nodelay ";
	std::string opt_congestion_algorithm =
			(congestion_algorithm == true) ?
					std::string(" --linux-congestion ")
							+ congestion_algorithm_name :
					"";
	std::string opt_ipv6 = (ipv6 == true) ? " --ipv6_domain " : "";
	std::string opt_ttl = " --ttl " + std::to_string(ttlVal);
	std::string opt_no_delay = (no_delay == true) ? " --nodelay " : "";

	/// iperf command
	std::string command_client = std::string("iperf -c ") + server_ip
			+ opt_bandwidth + opt_tranmission + opt_format
			+ opt_transport_protocol + opt_transport_port + opt_real_time
			+ opt_nodelay + opt_congestion_algorithm + opt_ipv6 + opt_ttl
			+ opt_no_delay;

	return (command_client);
}


